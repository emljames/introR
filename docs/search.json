[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "York Psychology ECR Workshop: Introduction to R",
    "section": "",
    "text": "Overview\nThis introductory R workshop has been put together for the York Psychology ECR Forum. The 2025 workshop will take place in the PC Lab (PS/A/203), 2pm-4pm on Wednesday 29th October.\nThe session will provide an introduction to R, providing you with the basic skills for getting started in using R for your own research. We will prioritise skills for data wrangling using a set of tools referred to as the tidyverse. The course is aimed at complete beginners in R – no programming experience or prior knowledge of R is required.\nThe workshop will be led by Emma James, with support from Jamie Cockroft. Both Emma and Jamie use R regularly in their research, and have experience in supporting beginners without any programming backgrounds.\n\n\nBefore the workshop\nIf you intend to use your own laptop for the workshop, please ensure that you have followed all the installation steps on the set-up page.\n\n\nBefore the workshop\nBefore the workshop, please follow all the set-up steps on the set-up page.\n\n\nWorkshop content\nThe main aim of this workshop is to introduce you to some key data processing tools that showcase why R can be an excellent choice for your data analysis. In doing so, we hope to give you the motivation to invest time in developing your skills in R, and the confidence to do so.\nThis workshop consists of three key sections:\n\nNavigating R and R Studio\n\nWhy R and RStudio\nRStudio panes\nObjects\nFunctions and packages\n\nData wrangling in R\n\nSelect relevant variables\nRename variables\nFilter relevant data\nCalculate participant averages\nCreate new variables\nSaving datasets\n\nReproducible research practices\n\nThe benefits of coding\nAlways comment your code!\nUsing Rmarkdown for readable outputs\n\n\nThis is quite an ambitious amount to achieve in two hours! It’s fairly likely that we will not get through everything, but we have deliberately left it flexible to adapt to attendees on the day. The materials are written so that you should be able to work through them independently at a later stage. You can also find some suggested resources for further learning here.\n\n\nDuring the workshop\n\nAsk for help when you need it\nThis is a “live coding” style workshop: Emma will walk through the content step-by-step for attendees to follow along on their own computers. Independent exercises provide opportunities to apply this knowledge, and allow us to re-group if people have fallen behind.\nThis is an informal setting, so please raise your hand whenever you have questions or need something explaining differently. Many aspects of working in R are not obvious when you encounter them for the first time, so no question is too silly to ask!\nJamie will come to your rescue if you fall behind or something isn’t working as expected, and we will pause to get everyone back on track as needed.\n\n\nSticky notes\nYou should have two coloured sticky notes. Please use these as instructed to indicate when you have finished an exercise, or have fallen behind and need us to slow down.\n\n\nCode of conduct\nWe are all learners at this workshop. Please respect that others might require a slower pace to you (you can always multi-task a little if you’re ahead of the game!). We expect all instructors and attendees to be welcoming and inclusive, and respect each other’s progress at all times. If you believe someone is violating this code of conduct, please let us know so that we can take the appropriate action to address the situation."
  },
  {
    "objectID": "reproducibility.html",
    "href": "reproducibility.html",
    "title": "Reproducible practices",
    "section": "",
    "text": "R is for Reproducibility\nOne of the advantages of conducting your data processing and analysis steps in R is that it can be readily shared on platforms such as the Open Science Framework. Using R has several benefits in this regard:\n\nYou can readily strip any information that you don’t want to share (e.g., Prolific IDs, IP addresses, etc.). Where appropriate, you can easily create more than one version of the dataset for different levels of access.\nAll your data cleaning steps are documented in a transparent and reproducible way.\nR is free and widely used, allowing anyone who has access to your scripts and data to reproduce the results (in theory!).\nYou can annotate your code to communicate your decisions and issues along the way (helpful for others AND future you).\nYou can use R Markdown to create readable output files (see below!). These can be helpful for quicker viewing, for making analyses transparent when you can’t share the data, and creating readable output for those who don’t use R.\n\n\n\nCreating annotated output files\nToday we have been working in an R Markdown file (.Rmd). This differs from a straight forward R script (.R) in that it integrates regular text, code, and output more efficiently, whereas an .R script interprets everything as code by default (essentially like the grey sections we’ve typing code in today). There are many people who will always use R Markdown (or the newer version, Quarto) when they use R. Some people even use it to write their entire manuscripts in a reproducible way!\nThere are many different features of R Markdown that could form a whole workshop on its own. However, with very few extra bits, we have already created a structured output from today’s work. Here are the features that we set up for you in the template file:\n\nWe used the # symbol in regular text to denote headings and subsections. # marks the level 1 heading, ## level 2, and ### level 3.\nWe set up code chunks, which have several features:\n\nThey start and end with three backticks (```) - located on the keyboard above the tab key, to the left of the 1.\nThe first set of backticks are followed by a set of curly brackets {} containing chunk information. The first most important thing in here is the letter r, to instruct the computer to interpret the code as R code.\nThe second thing we included in the curly brackets is a code chunk label. These follow the same rules as column names (i.e., no spaces!). If we want to create an output file, then every code chunk needs a different label.\nThere several other options for setting up your code chunks (e.g., whether the file prints the code and output), but we haven’t gone into this today.\n\n\nThere are several options for formatting your text in different ways. You can incorporate these directly in the source code, but nowadays there’s a much easier editing option in RStudio. If you click on Visual at the top of the script window, it will bring up a text editor with Word-like features. You can switch back and forth between these two editing styles as needed.\nSo how to we turn that into a nice output file? Well, we try clicking “Knit” at the top of the window! This might be a big ask after today’s short workshop, but let’s try it and see what happens.\nDebugging: A few things that might prevent it working:\n\nNot having the relevant packages installed\nNot having everything scripted - e.g., if you have loaded data in a different way, then R won’t be able to find it again when it runs your code from scratch.\nHaving unfinished code chunks - if R hits an error along the way, it will stop executing the file. If this happens, you could try commenting out that code section as a temporary solution.\nHaving code chunks with duplicate names\n\nIf it’s not working at the end of this workshop but you’d like to get it up and running, reach out for us for some support.\n\n\nGood practices\nHere are a few key principles:\n\nCode everything! (as much as you can). This is hard when you are a beginner. Why take an hour to make the stupid line of code work when you could open the file in Excel and delete the column in mere seconds? But future you will be grateful when you have to redownload some data and start again. You only need to figure it out once (ask for support if you need to!), and you’ll be super whizzy in the future.\nNever delete raw data (unless there are GDPR/ethics implications) - keep raw and processed data separate.\nUse sensible names for variables and for objects. This will help to make your code more readable, and avoid mistakes. For example, data_session1 is more informative than data2.\nComment everything! Well, not everything. But document your key steps along the way so that it’s readable.\nChunk your data processing and analysis steps for readability - either in separate files, and/or using features in R Markdown.\nTry to document package versions. One downside to R’s updating and ongoing work is that packages and functions can change, meaning that your code is not entirely future proof. There are some elegant ways to incorporate version control in your scripts, but a simple way to document this you can include a call to sessionInfo() at the end of your .Rmd script.\n\nRemember, a benefit of openness is that you can look to others for examples! The Open Science Framework is ideal for this. Of course there is a lot of variability in coding practices, but looking at how other people go about structuring and reporting their analyses can be a good way to learn. There’s no one right way, so you can decide what you think works well for your particular situation.\n\n\nThe final word\nFinally, just do the best you can! It’s all well and good to have standards to aim for, but starting out in R can be hard. You can guarantee that our early scripts didn’t look anywhere near our versions now, and that’s OK! R is hard, but it’s also kind of fun."
  }
]