---
title: "Reproducible practices"
---

# R is for Reproducibility

One of the advantages of conducting your data processing and analysis steps in R is that it can be readily shared on platforms such as the Open Science Framework. Using R has several benefits in this regard:

-   You can readily strip any information that you don't want to share (e.g., Prolific IDs, IP addresses, etc.). Where appropriate, you can easily create more than one version of the dataset for different levels of access.

-   All your data cleaning steps are documented in a transparent and reproducible way.

-   R is free and widely used, allowing anyone who has access to your scripts and data to reproduce the results (in theory!).

-   You can annotate your code to communicate your decisions and issues along the way (helpful for others AND future you).

-   You can use R Markdown to create readable output files (see below!). These can be helpful for quicker viewing, for making analyses transparent when you *can't* share the data, and creating readable output for those who don't use R.

# Creating annotated output files

![[Artwork by \@allison_horst](https://x.com/allison_horst)](images/r_markdown.png){fig-alt="Two fuzzy round monsters dressed as wizards, working together to brew different things together from a pantry (code, text, figures, etc.) in a cauldron labeled “R Markdown”. The monster wizard at the cauldron is reading a recipe that includes steps “1. Add text. 2. Add code. 3. Knit. 4. (magic) 5. Celebrate perceived wizardry.” The R Markdown potion then travels through a tube, and is converted to markdown by a monster on a broom with a magic wand, and eventually converted to an output by pandoc. Stylized text (in a font similar to Harry Potter) reads “R Markdown. Text. Code. Output. Get it together, people.”" fig-align="center" width="460"}

Today we have been working in an R Markdown file (.Rmd). This differs from a straight forward R script (.R) in that it integrates regular text, code, and output more efficiently, whereas an .R script interprets everything as code by default — essentially like the grey sections we've been typing code in today. There are many people who will *always* use R Markdown when they use R (or the newer version, *Quarto*). Some people even use it to write their entire manuscripts in a reproducible way!

There are many different features of R Markdown that could form a whole workshop on its own. However, with very few extra bits, we have already created a structured output from today's work. Here are the features that we set up for you in the template file:

-   We used the \# symbol in regular text to denote headings and subsections. \# marks the level 1 heading, \## level 2, and \### level 3.

-   We set up code chunks, which have several features:

    -   They start and end with three backticks (\`\`\`) - located on the keyboard above the tab key, to the left of the 1.

    -   The first set of backticks are followed by a set of curly brackets `{}` containing chunk information. The first most important thing in here is the letter `r`, to instruct the computer to interpret the code as R code.

    -   The second thing we included in the curly brackets is a code chunk label. These follow the same rules as column names (i.e., no spaces!). If we want to create an output file, then every code chunk needs a different label.

    -   There several other options for setting up your code chunks (e.g., whether the file prints the code and output), but we haven't gone into this today.

There are several options for formatting your text in different ways. You can incorporate these directly in the source code, but nowadays there's a much easier editing option in RStudio. If you click on Visual at the top of the script window, it will bring up a text editor with Word-like features. You can switch back and forth between these two editing styles as needed.

So how to we turn that into a nice output file? Well, we try clicking "Knit" at the top of the window! This might be a big ask after today's short workshop, but let's try it and see what happens.

::: {.callout-caution title="Debugging: Common issues that cause problems"}
-   Not having the relevant packages installed
-   Not having everything scripted - e.g., if you have loaded data in a different way, then R won't be able to find it again when it runs your code from scratch.
-   Having unfinished code chunks - if R hits an error along the way, it will stop executing the file. If this happens, you could try commenting out that code section as a temporary solution.
-   Having code chunks with duplicate names
:::

If it's not working at the end of this workshop but you'd like to get it up and running, reach out to us for some support.

# Good practices

Here are a few key principles for working in R:

1.  **Code everything!** (as much as you can). This is hard when you are a beginner. Why take an hour to make the stupid line of code work when you could open the file in Excel and delete the column in mere seconds? But future you will be grateful when you have to redownload some data and start again. You only need to figure it out once (ask for support if you need to!), and you'll be super whizzy in the future.
2.  **Never delete raw data** (unless there are GDPR/ethics implications) — keep raw and processed data separate.
3.  **Use sensible names** for variables and for objects. This will help to make your code more readable, and avoid mistakes. For example, `data_session1` is more informative than `data2`.
4.  **Comment everything!** Well, not *everything.* But document your key steps along the way so that it's readable. This will help other people to understand your code, and will make it easier for future-you to return to.
5.  **Chunk** your data processing and analysis steps for readability - either in separate files, and/or using features in R Markdown.
6.  Try to **document package versions.** One downside to R's updating and ongoing work is that packages and functions can change, meaning that your code is not entirely future proof. There are some elegant ways to incorporate version control in your scripts, but a simple way to document this you can include a call to `sessionInfo()` at the end of your .Rmd script.

Remember, a benefit of openness is that you can look to others for examples! The Open Science Framework is ideal for this. Of course there is a lot of variability in coding practices, but looking at how other people go about structuring and reporting their analyses can be a good way to learn. There's no one right way, so you can decide what you think works well for your particular situation.

# The final word

Finally, **just do the best you can!** It's all well and good to have standards to aim for, but starting out in R can be hard. You can guarantee that our early scripts didn't look anywhere near our versions now, and that's OK! R *is* hard, but it's also kind of fun.

![[Artwork by \@allison_horst](https://x.com/allison_horst)](images/r_change.png){fig-alt="A digital cartoon with two illustrations: the top shows the R-logo with a scary face, and a small scared little fuzzy monster holding up a white flag in surrender while under a dark storm cloud. The text above says “at first I was like…” The lower cartoon is a friendly, smiling R-logo jumping up to give a happy fuzzy monster a high-five under a smiling sun and next to colorful flowers. The text above the bottom illustration reads “but now it’s like…”" fig-align="center" width="365"}
